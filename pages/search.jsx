import { PCCConvenienceFunctions } from "@pantheon-systems/pcc-react-sdk";
import { useAtom } from "jotai";
import { NextSeo } from "next-seo";
import Image from "next/image";
import { useEffect } from "react";
import { PostGrid } from "../components/grid";
import Layout from "../components/layout";
import { searchQueryAtom } from "../components/searchbar";

export default function Search({ articles, searchString, summary }) {
  const [searchQuery, setSearchQuery] = useAtom(searchQueryAtom);

  useEffect(() => {
    setSearchQuery(searchString);
    // Don't include searchString as a hook dependency because we only
    // want to update it when this component initially mounts.
  }, [setSearchQuery]); // eslint-disable-line react-hooks/exhaustive-deps

  const HomepageHeader = () => (
    <div className="flex flex-col mx-auto mt-20 prose sm:prose-xl max-w-fit">
      <h1 className="h-full text-4xl prose text-center">
        Welcome to{" "}
        <a
          className="text-blue-600 no-underline hover:underline"
          href="https://nextjs.org"
        >
          Next.js!
        </a>
      </h1>
      <div className="text-2xl">
        <div className="flex items-center justify-center p-4 text-white bg-black rounded">
          Decoupled PCC on{" "}
          <Image
            src="/pantheon.png"
            alt="Pantheon Logo"
            style={{
              margin: 0,
            }}
            width={191}
            height={60}
          />
        </div>
      </div>
    </div>
  );

  return (
    <Layout>
      <NextSeo
        title="Decoupled Next PCC Demo"
        description="Generated by create-pantheon-decoupled-kit."
      />
      <HomepageHeader />
      <section className="border-2 max-w-[720px] mx-auto my-4 bg-green-400/10 rounded-lg">
        <div className="mt-4 text-sm text-center">
          âœ¨ Generative AI is experimental
        </div>
        <div className="px-4 py-4">
          {summary ? (
            summary
          ) : (
            <i>No generative AI results available for this search</i>
          )}
        </div>
      </section>
      <h3 className="mt-4 text-3xl text-center">
        Search results for &quot;{searchQuery}&quot;
      </h3>
      <section>
        <PostGrid contentType="posts" data={articles} />
      </section>
    </Layout>
  );
}

export async function getServerSideProps({ query }) {
  const { articles, summary } =
    await PCCConvenienceFunctions.getAllArticlesWithSummary(
      {
        publishingLevel: "PRODUCTION",
      },
      {
        titleContains: query.q,
        tagContains: query.q,
        bodyContains: query.q,
      },
      true,
    );

  return {
    props: {
      articles,
      summary,
      searchString: query.q,
    },
  };
}
